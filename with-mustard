#!/usr/bin/python
# -*- Python -*-
#
# Copyright (C) 2012-2013 Codethink Limited
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import code
import readline
import sys

import mustard

class Thingy(object):
    pass

state_id = "UNCOMMITTED"

raw_tree_cache = mustard.rawtree.Cache()
element_tree_cache = mustard.elementtree.Cache(raw_tree_cache)

thingy = Thingy()

repository = mustard.repository.Repository(thingy, ".")
state_cache = mustard.state.Cache(thingy, repository)

state = state_cache.get(state_id)
raw_tree = mustard.rawtree.Tree(state)
element_tree = mustard.elementtree.Tree(raw_tree)

elt = element_tree

def fst(l):
    return [f for (f,s) in l]
def snd(l):
    return [s for (f,s) in l]

d = dict
s = set

def path(node):
    revmap = dict([(v,k) for (k,v) in elt.elements.items()])
    return revmap.get(node, None)

def has_todo(elt):
    return "TODO" in elt.description

def showall(elts):
    if type(elts) == dict:
        elts = elts.itervalues()
    mapping = {}
    for elt in elts:
        mapping[path(elt)] = elt.title
    keys = mapping.keys()
    keys.sort()
    for k in keys:
        print "%s : %s" % (k, mapping[k])

namespace = globals().copy()
namespace.update(locals())
code.InteractiveConsole(namespace).interact("""
The variable `elt' is the MUSTARD element tree.

Useful listish operations include 'fst' which given a list of tuples, returns a
list of the first element of the tuples, and 'snd' which does the same with the
second elements. 'd' is a short alias for 'dict' and 's' for 'set'.  'showall'
is a function which takes a collection of elements and lists them.

""")


