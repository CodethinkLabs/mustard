Mustard README
==============

This is the official repository for the development of Mustard,
the Mapped Uniform System for Tracking Architecture, Requirements
and Design.

Contents:

  1. Mustard data format
  2. Installing Mustard
  3. Deploying Mustard Using Apache2
  4. Copyright



1. Mustard data format
======================


General concepts
----------------

Mustard allows you to manage the following information about a project:

  * Requirements
  * Architecture(s)
  * Components
  * Interfaces
  * Integration strategies
  * Tests
  * Work Items

Mustard reads these elements from YAML files stored in a Git repository.
Every commit in the repository represents a different state of the
overall architecture.

Each element is specified as dictionary with a special key called `kind`
that identifies the type of the element.

Two examples:

  kind: requirement
  title: The software needs to do XYZ

And:

  kind: component
  title: Web application
  description: Some Markdown-formatted text to describe the component.
  parent: architectures/software

Every element in the project is associated with a unique identifier that
is very similar to a path in a file system. The identifiers allow to
link elements together and thereby establish a bidirectional mapping
from requirements all the way down to work items and tests and back.

How the YAML files are organised in the repository tree is up to the
architects. The element paths are specified as follows:


Element identifiers
-------------------

One possible way to store elements in the YAML repository is to use
one file per element. In this case the path to the file, relative to
the repository directory and without the .yaml extension, becomes the
identifier of the element.

For example, a file called

  $repo/requirements/software/feature-xyz.yaml

with the contents

  kind: requirements
  title: Feature XYZ

would result in a requirement element with the identifier
`requirements/software/feature-xyz`.

In addition to this, nested dictionaries in a YAML file can be used as
an effective way to group elements. In this case, the path to the YAML
file plus the hierarchy of dictionary keys leading to the elements
become the element identifiers.

First example: a file called

  $repo/components/software.yaml

with the contents

  webapp:
    kind: component
    title: Web application
    parent: architectures/software

  phoneapp:
    kind: component
    title: Phone app
    parent: architectures/software

results in two component elements with the identifiers
`components/software/webapp` and `components/software/phoneapp`.

A file called

  $repo/requirements.yaml

with nested dictionaries

  system:
    software:
      rails:
        kind: requirement
        title: Web application written in Ruby on Rails
    infrastructure:
      heroku:
        kind: requirement
        title: Web app deployment via Heroku

will generate two requirement elements with the identifiers
`requirements/system/software/rails` and
`requirements/system/infrastructure/heroku`.

It is also possible to nest elements like this:

  requirements.yaml:

  system:
    software:
      webapp:
        kind: requirement
        title: There needs to be a web application

        heroku:
          kind: requirement
          title: Web app deployment via Heroku
          parent: requirements/system/software/webapp

The above results in two elements with the identifiers
`requirements/system/software/webapp` and
`requirements/system/software/webapp/heroku`.


Uniqueness
----------

NOTE: Mustard requires that all identifiers in the project be unique.
It will raise an error whenever there are duplicates in the system and
will try to help you resolve them.


Supported elements and keys
---------------------------

Requirements (kind: requirement):

  Used to specify requirements.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parent      (optional)

  Example:

    kind: requirement
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/required
      - tags/high-priority
    parent: identifier/of/parent/requirement

Architectures (kind: architecture):

  Used to specify the system architecture and architectures of
  components.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parent      (optional)
    - mapped-here (optional)

  Example:

    kind: architecture
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parent: identifier/of/parent/component
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement

Components (kind: component):

  Used to specify components of an architecture.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parent      (optional)
    - mapped-here (optional)

  Example:

    kind: component
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parent: identifier/of/parent/architecture
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement

Interfaces (kind: interface):

  Used to specify interfaces of components.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parent      (optional)
    - mapped-here (optional)

  Example:

    kind: interface
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parent: identifier/of/parent/component
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement

Integration strategies (kind: integration-strategy):

  Used to specify integration strategies for architectures.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parent      (optional)
    - mapped-here (optional)

  Example:

    kind: integration-strategy
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parent: identifier/of/parent/architecture
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement

Tests (kind: test):

  Used to describe tests for an integration strategy, a component or an
  interface.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parents     (optional)
    - mapped-here (optional)

  Example:

    kind: test
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parents:
      - identifier/of/an/integration-strategy
      - identifier/of/a/component
      - identifier/of/an/interface
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement

Work Items (kind: work-item):

  Used to specify work items required to implement/realise
  architectures, components, interfaces, tests etc., all in order to
  satisfy the system requirements.

  Supported keys:

    - title       (optional)
    - description (optional)
    - tags        (optional)
    - parents     (optional)
    - mapped-here (optional)

  Example:

    kind: work-item
    title: Any string
    description: A string in Markdown format.
    tags:
      - tags/foo
      - tags/bar
    parents:
      - identifier/of/an/architecture
      - identifier/of/a/component
      - identifier/of/an/interface
      - identifier/of/an/integration-strategy
      - identifier/of/a/test
    mapped-here:
      - identifier/of/a/requirement
      - identifier/of/another/requirement



2. Installing Mustard
=====================


Dependencies
------------

In order to use MUSTARD, you'll need the following components:

  * Python >= 2.6
  * PyYAML
  * python-markdown
  * python-bottle
  * pygit2 (and libgit2)

Most of the dependencies should be available in your distro, apart from
libgit2 and pygit2. The section below explains how to install these two
easily.


Installing pygit2
-----------------

If you lack pygit2 in your distribution, the safest way to get it is to
prepare a statically built libgit2 in a temporary installation location
and then link pygit2 against that.  Since libgit2 is not API/ABI stable
yet, this will innoculate you against others installing different
versions of libgit2 at other times.  It won't save you from incompatible
pygit2 installs, but you can fiddle with python paths if you care about
that.

To build libgit2 statically and pygit2 with that, do the following:

    $ mkdir pygit-building
    $ cd pygit-building
    $ git clone git://github.com/libgit2/libgit2.git
    $ git clone git://github.com/libgit2/pygit2.git
    $ cd libgit2
    $ mkdir build
    $ cd build
    $ cmake -DBUILD_SHARED_LIBS:BOOLEAN=OFF \
        -DCMAKE_INSTALL_PREFIX=$(pwd)/install ..
    $ make
    $ make install DESTDIR=""
    $ cd ../../pygit2
    $ LIBGIT2="$(pwd)/../libgit2/build/install" python setup.py build
    $ sudo python setup.py install

This will install pygit2 into /usr/local -- obviously you can tweak the
`setup.py` invocations if you wish to alter where it installs to.


Installing Mustard itself
-------------------------

Installing Mustard into the system is as simple as running

  python setup.py build
  sudo python setup.py install



3. Deploying Mustard using Apache2
==================================

Mustard can be set up as an Apache site easily using mod_wsgi. It ships
an `adapter.wsgi` file that can be set up to handle HTTP requests as
follows:

  <VirtualHost *:80>
      ServerName someserver.org
      ServerAdmin root
      DocumentRoot /var/www/someserver.org

      WSGIDaemonProcess mustard user=www-data group=www-data \
        processes=1 threads=5
      WSGIScriptAlias / /var/www/someserver.com/adapter.wsgi

      <Directory /var/www/someserver.com>
        SetEnv MUSTARD_SERVER_PATH /var/www/someserver.com/
        SetEnv MUSTARD_PROJECT_PATH /path/to/the/mustard-repo.git
        SetEnv MUSTARD_PLANTUML_JAR /path/to/plantuml.jar

        WSGIProcessGroup mustard
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
      </Directory>
  </VirtualHost>

For the above to work, Mustard, or at least its `adapter.wsgi` must be
located in `/var/www/someserver.com`.



4. Copyright
============

Copyright (C) 2012 Codethink Ltd.
